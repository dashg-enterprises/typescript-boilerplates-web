AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description:
  AWS CloudFormation template to deploy a static site to S3 behind CloudFront CDN on a custom domain
# Description: >-
#   AWS CloudFormation sample template
#   - Request public SSL/TLS certificate from AWS Certificate Manager (ACM) for our domain name and all its subdomains to use to secure network communications and establish the identity of websites over the Internet 
#   - Create an Origin Access Identity (OAI) which is a special CloudFront user that you can associate with Amazon S3 origins, so that you can secure S3 content 
#   - Create CloudFront distribution for subdomain. Point it to S3 bucket for subdomain (that contains static website, such as www.example.com) from which CloudFront gets the files to distribute
#   - Create a policy for S3 bucket for subdomain (that contains static website, such as www.example.com) to let CloudFront OAI access S3 bucket content
#   - Create CloudFront distribution for root domain. Point it to S3 bucket for root domain (that redirects requests to S3 bucket for subdomain, such as from example.com to www.example.com)
#   - Create a new S3 bucket and it's policy, configure it to host a static website  
#   - Create records in a public hosted zone in Route 53 to define how you want to route traffic on the internet for a domain, such as example.com, and its subdomains (www.example.com, apex.example.com)
#   - Create Route 53 resources to route DNS traffic for your domain to your S3 bucket that hosts static website

## ==================== PARAMETERS ==================== ##
Parameters:
  ParamRootDomain:
    Description: Specify a root domain for your website (such as example.com)
    Type: String
    Default: justthespot.io
  ParamSubdomain:
    Description: OPTIONAL. Specify a subdomain (such as 'www' or 'apex' for www.example.com or apex.example.com). You can leave it empty to skip.
    Type: String
    Default: www
  ParamUniqueTagName:
    Description: Specify a unique name for tag
    Type: String
    Default: static-website-hosting-to-s3
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters
  ParamHostedZoneId:
    Description: Specify the hosted zone associated with the domain
    Type: String
    Default: Z03829103FGKVJE6VHSAF
    

## ==================== MAPPINGS ==================== ##
Mappings:
  RegionMap: # based on https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
    eu-central-1:
      S3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
    sa-east-1:
      S3HostedZoneId: Z31GFT0UA1I2HV

## ==================== CONDITIONS ==================== ##
Conditions:
  # HasSubdomainName is false if ParamSubdomain value is empty string
  HasSubdomainName: !Not [!Equals [!Ref ParamSubdomain, '']] 

## ===================== RESOURCES ===================== ##
Resources:

  ## ===================== BEGIN RECORD SET ===================== ##
   # create a Route 53 record set group to route DNS traffic to CloudFront domain for both - domain and subdomain
  Route53RecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      Comment: Route53 record for CloudFront distributions for root domain and subdomain
      # HostedZoneName: !Sub '${ParamRootDomain}.'  # keep the dot
      HostedZoneId: !Ref ParamHostedZoneId
      RecordSets:
        # for CloudFront distributions subdomain (such as www.example.com)
        - Name: !Sub '${ParamSubdomain}.${ParamRootDomain}.'  # keep the dot
          Type: A # 'A' routes traffic to an IPv4 address and some AWS resources. E.g. if the name of the hosted zone is 'example.com' and you want to use www.example.com to route traffic to your distribution, enter 'www.'
          AliasTarget:
              DNSName: !GetAtt CloudFrontDistributionForSubdomain.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # DONT change! It is a magical alphanumeric ID provided by AWS team for CloudFront distribution 
        # for CloudFront distributions root domain (such as example.com)
        - Name: !Sub '${ParamRootDomain}.'  # keep the dot
          Type: A # 'A' routes traffic to an IPv4 address and some AWS resources. E.g. if the name of the hosted zone is 'example.com' and you want to use www.example.com to route traffic to your distribution, enter 'www.'
          AliasTarget:
              DNSName: !GetAtt CloudFrontDistributionForRootDomain.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # DONT change! It is a magical alphanumeric ID provided by AWS team for CloudFront distribution 
  ## ===================== END RECORD SET ===================== ##       


  ## =================== BEGIN HOSTED ZONE =================== ##
  # Create a public hosted zone
  # Route53HostedZone:
  #   Type: 'AWS::Route53::HostedZone'
  #   Properties:
  #     HostedZoneConfig: 
  #       Comment: !Sub Public hosted zone for ${ParamRootDomain}
  #     Name: !Ref ParamRootDomain
  #     HostedZoneTags: 
  #       - Key: mastering-cloudformation
  #         Value: !Ref ParamUniqueTagName
  ## =================== END HOSTED ZONE =================== ##

  ## ===================== BEGIN S3 BUCKETS ===================== ##
   # create S3 bucket for subdomain (such as www.example.com) and configure it to host a static website
  S3BucketForSubdomain:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain # keep S3 bucket when its stack is deleted
    Properties:
      BucketName: !Sub ${ParamSubdomain}.${ParamRootDomain} # use the name of subdomain with domain, such as www.example.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      VersioningConfiguration: # turn versioning on in case we need to rollback newly built files to older version
        Status: Enabled
      AccessControl: BucketOwnerFullControl
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName

  # create S3 bucket for root domain (such as example.com) and set it up to redirect requests to S3 bucket for subdomain (such as from example.com to www.example.com)
  S3BucketForRootDomain:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain # keep S3 bucket when its stack is deleted
    Properties:
      BucketName: !Ref ParamRootDomain # use the name of your domain, such as example.com
      WebsiteConfiguration:
        RedirectAllRequestsTo: # Configure the bucket to route traffic to the subdomain bucket
          HostName: !Ref S3BucketForSubdomain
          Protocol: https
      AccessControl: BucketOwnerFullControl
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName

            


  ## ===================== BEGIN ACM ===================== ##
  # request public SSL/TLS certificate from AWS Certificate Manager (ACM) for our domain name and all its subdomains 
  # it helps to secure network communications and establish the identity of websites over the Internet 
  SSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref ParamRootDomain # root domain (such as example.com)
      SubjectAlternativeNames:
        - !Sub '*.${ParamRootDomain}' # request a wildcard certificate for all subdomains
      DomainValidationOptions:
        - DomainName: !Ref ParamRootDomain # DNS record for the root domain
          HostedZoneId: !Ref ParamHostedZoneId
        # Note: If a certificate with automatic (Route53) DNS validation contains both a base domain name and the wildcard for that domain (e.g., example.com and *.example.com), the corresponding DNS validation records are identical.
        # This seems to have caused problems for the automated CloudFormation DNS validation. Solving the problem by removing the redundant wildcard entries from the DomainValidationOption.  
        # Source: https://github.com/aws/aws-cdk/pull/9291 
        - DomainName: !Sub '*.${ParamRootDomain}' # DNS record for the all subdomains
          HostedZoneId: !Ref ParamHostedZoneId
          ValidationDomain: !Ref ParamRootDomain  
      ValidationMethod: DNS
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName
  ## ===================== END ACM ===================== ##

  ## ===================== BEGIN CDN ===================== ##
  # create CloudFront distribution for subdomain. Point it to S3 bucket for subdomain (that contains static website, such as www.example.com) from which CloudFront gets the files to distribute
  CloudFrontDistributionForSubdomain:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CloudFront distribution points to S3 bucket for subdomain
        Origins: # info about origins for this distribution
          - DomainName: !Sub '${ParamSubdomain}.${ParamRootDomain}.s3.${AWS::Region}.amazonaws.com' # Regional domain name of S3 bucket for subdomain (outputS3RegionalDomainNameForSubomain)
            Id: !Sub 'S3Origin-${ParamSubdomain}.${ParamRootDomain}' # unique identifier of an origin access control for this origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Aliases: # info about CNAMEs (alternate domain names), if any, for this distribution
          - !Sub '${ParamSubdomain}.${ParamRootDomain}'
        # let CloudFront replace HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer
        CustomErrorResponses:
          - ErrorCode: 403 # 403 from S3 indicates that the file does not exists
            ResponseCode: 404 # HTTP status code that you want CloudFront to return to the viewer along with the custom error pag
            ResponsePagePath: '/error.html' # path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html
            ErrorCachingMinTTL: 60 # minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds, 1 hour
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MaxTTL: 86400 # in seconds, 24 hours
          MinTTL: 60 # in seconds, 1 min
          TargetOriginId: !Sub 'S3Origin-${ParamSubdomain}.${ParamRootDomain}'
          ViewerProtocolPolicy: 'redirect-to-https' # 'allow-all'
        DefaultRootObject: 'index.html' 
        Enabled: true # enable distribution
        HttpVersion: http2 # the maximum HTTP version(s) that you want viewers to use to communicate with CloudFront
        PriceClass: PriceClass_All # allowed values: PriceClass_100 | PriceClass_200 | PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName

  # create a policy for S3 bucket for subdomain (that contains static website, such as www.example.com) to let CloudFront OAI access S3 bucket content
  PolicyForS3BucketForSubdomain:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Sub '${ParamSubdomain}.${ParamRootDomain}'
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${ParamSubdomain}.${ParamRootDomain}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
        # deny access for non SSL access to S3 bucket
        - Sid: AllowSSLRequestsOnly 
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !Sub 'arn:aws:s3:::${ParamSubdomain}.${ParamRootDomain}'
          - !Sub 'arn:aws:s3:::${ParamSubdomain}.${ParamRootDomain}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # # create CloudFront distribution for root domain. Point it to S3 bucket for root domain (that redirects requests to S3 bucket for subdomain, such as from example.com to www.example.com)
  # CloudFrontDistributionForRootDomain:
  #   Type: 'AWS::CloudFront::Distribution'
  #   Properties:
  #     DistributionConfig:
  #       Comment: CloudFront distribution points to S3 bucket for root domain
  #       Origins: # info about origins for this distribution
  #       - Id: S3Origin
  #         DomainName: !GetAtt S3BucketForRootDomain.DomainName
  #         S3OriginConfig:
  #           OriginAccessIdentity: ''
  #         OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
  #         # Important! Known issue with Cloudfront to s3 redirect giving Access denied error
  #         # see https://stackoverflow.com/questions/22740084/amazon-s3-redirect-and-cloudfront 
  #         # - DomainName: !Sub '${ParamRootDomain}.s3.${AWS::Region}.amazonaws.com' # Regional domain name of S3 bucket for root domain (outputS3RegionalDomainNameForRootDomain)
  #         - DomainName: !Sub '${ParamRootDomain}.s3-website-${AWS::Region}.amazonaws.com' # use Amazon S3 website endpoint for root domain (outputS3WebsiteURLForRootDomain)
  #           Id: !Sub 'RedirectS3Origin-${ParamRootDomain}' # unique identifier of an origin access control for this origin
  #           # Important, for Amazon S3 website endpoint as DomainName need to be configured as CustomOriginConfig and NOT as S3OriginConfig
  #           # It resolves the following issue: "Resource handler returned message: "Invalid request provided: The Parameter Origin DomainName does not refer to a valid S3 bucket.""
  #           # see https://stackoverflow.com/questions/40095803/how-do-you-create-an-aws-cloudfront-distribution-that-points-to-an-s3-static-ho 
  #           # see https://github.com/hashicorp/terraform-provider-aws/issues/7847 
  #           CustomOriginConfig:
  #             HTTPPort: 80 # required
  #             HTTPSPort: 443 # required
  #             OriginProtocolPolicy: 'http-only' 
  #       Aliases: # info about CNAMEs (alternate domain names), if any, for this distribution
  #         - !Sub '${ParamRootDomain}'
  #       # let CloudFront replace HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer
  #       CustomErrorResponses:
  #         - ErrorCode: 403 # 403 from S3 indicates that the file does not exists
  #           ResponseCode: 404 # HTTP status code that you want CloudFront to return to the viewer along with the custom error pag
  #           ResponsePagePath: '/error.html' # path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html
  #           ErrorCachingMinTTL: 60 # minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         CachedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         Compress: true
  #         DefaultTTL: 3600 # in seconds, 1 hour
  #         ForwardedValues:
  #           QueryString: false
  #           Cookies:
  #             Forward: none
  #         MaxTTL: 86400 # in seconds, 24 hours
  #         MinTTL: 60 # in seconds, 1 min
  #         TargetOriginId: !Sub 'RedirectS3Origin-${ParamRootDomain}'
  #         ViewerProtocolPolicy: 'redirect-to-https' # 'allow-all'
  #       DefaultRootObject: 'index.html' 
  #       Enabled: true # enable distribution
  #       HttpVersion: http2 # the maximum HTTP version(s) that you want viewers to use to communicate with CloudFront
  #       PriceClass: PriceClass_All # allowed values: PriceClass_100 | PriceClass_200 | PriceClass_All
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref SSLCertificate
  #         SslSupportMethod: sni-only
  #     Tags:
  #       - Key: mastering-cloudformation
  #         Value: !Ref ParamUniqueTagName

  # CloudFront Distribution for contents delivery
  CloudFrontDistributionForRootDomain:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt S3BucketForRootDomain.DomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        DefaultCacheBehavior:
          CachePolicyId: CachingOptimized
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Aliases:
        - !Ref ParamRootDomain
        IPV6Enabled: false

  # # create a policy for S3 bucket for root domain (that redirect the request to S3 bucket for subdomain) to let CloudFront OAI access S3 bucket content
  # PolicyForS3BucketForRootDomain:
  #   Type: 'AWS::S3::BucketPolicy'
  #   Properties:
  #     Bucket: !Sub '${ParamRootDomain}'
  #     PolicyDocument:
  #       Statement:
  #       - Action: 's3:GetObject'
  #         Effect: Allow
  #         Resource: !Sub 'arn:aws:s3:::${ParamRootDomain}/*'
  #         Principal:
  #           CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
  #       # deny access for non SSL access to S3 bucket
  #       - Sid: AllowSSLRequestsOnly 
  #         Effect: Deny
  #         Principal: '*'
  #         Action: 's3:*'
  #         Resource:
  #         - !Sub 'arn:aws:s3:::${ParamRootDomain}'
  #         - !Sub 'arn:aws:s3:::${ParamRootDomain}/*'
  #         Condition:
  #           Bool:
  #             'aws:SecureTransport': false

## ======================= END CDN ====================== ##  

## ======================= OUTPUT ====================== ##
Outputs:
  WebsiteURLForRootDomain:
    Description: Amazon S3 website endpoint for root domain
    Value: !GetAtt S3BucketForRootDomain.WebsiteURL
  WebsiteURLForSubomain:
    Condition: HasSubdomainName
    Description: Amazon S3 website endpoint for subdomain
    Value: !GetAtt S3BucketForSubdomain.WebsiteURL
  # Route53HostedZoneId:
  #   Description: Public hosted zone ID (such as Z23ABC4XYZL05B)
  #   Value: !Ref ParamHostedZoneId # the same as !Ref Route53HostedZone  
  # Route53HostedZoneNameServers:
  #   Description: List of name servers for newly created public hosted zone
  #   Value: !Join [', ', !GetAtt Route53HostedZone.NameServers] 
  CertificateArn:
    Description: Issued SSL certificate Arn
    Value: !Ref SSLCertificate


    ## OAC ATTEMPT ##
  # S3 bucket policy to allow access from CloudFront OAC
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${AssetsBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${AssetsDistribution}
        - Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource: 
            - !Sub ${AssetsBucket.Arn}/*
            - !GetAtt AssetsBucket.Arn
          Condition:
            Bool: 
              aws:SecureTransport: false

  # StaticSiteDeployPolicy:
  #   Type: AWS::IAM::ManagedPolicy
  #   Properties:
  #     Description: Policy for CI/CD bot user
  #     ManagedPolicyName: !Join [ "-", [ !Ref AWS::StackName, "policy"] ]
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:PutObject
  #             - s3:ListBucket
  #             - cloudfront:CreateInvalidation
  #           Resource:
  #             - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${AssetsDistribution}
  #             - !Sub ${AssetsBucket.Arn}/*
  #             - !GetAtt AssetsBucket.Arn