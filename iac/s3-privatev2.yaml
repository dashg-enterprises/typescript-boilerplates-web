AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description:
  AWS CloudFormation template to deploy a static site to S3 behind CloudFront CDN on a custom domain
# Description: >-
#   AWS CloudFormation sample template
#   - Request public SSL/TLS certificate from AWS Certificate Manager (ACM) for our domain name and all its subdomains to use to secure network communications and establish the identity of websites over the Internet 
#   - Create an Origin Access Identity (OAI) which is a special CloudFront user that you can associate with Amazon S3 origins, so that you can secure S3 content 
#   - Create CloudFront distribution for subdomain. Point it to S3 bucket for subdomain (that contains static website, such as www.example.com) from which CloudFront gets the files to distribute
#   - Create a policy for S3 bucket for subdomain (that contains static website, such as www.example.com) to let CloudFront OAI access S3 bucket content
#   - Create CloudFront distribution for root domain. Point it to S3 bucket for root domain (that redirects requests to S3 bucket for subdomain, such as from example.com to www.example.com)
#   - Create a new S3 bucket and it's policy, configure it to host a static website  
#   - Create records in a public hosted zone in Route 53 to define how you want to route traffic on the internet for a domain, such as example.com, and its subdomains (www.example.com, apex.example.com)
#   - Create Route 53 resources to route DNS traffic for your domain to your S3 bucket that hosts static website

## ==================== PARAMETERS ==================== ##
Parameters:
  ParamRootDomain:
    Description: Specify a root domain for your website (such as example.com)
    Type: String
    Default: justthespot.io
  ParamSubdomain:
    Description: OPTIONAL. Specify a subdomain (such as 'www' or 'apex' for www.example.com or apex.example.com). You can leave it empty to skip.
    Type: String
    Default: www
  ParamUniqueTagName:
    Description: Specify a unique name for tag
    Type: String
    Default: static-website-hosting-to-s3
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters
  ParamHostedZoneId:
    Description: Specify the hosted zone associated with the domain
    Type: String
    Default: Z03829103FGKVJE6VHSAF
    

## ==================== MAPPINGS ==================== ##
Mappings:
  RegionMap: # based on https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
    eu-central-1:
      S3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
    sa-east-1:
      S3HostedZoneId: Z31GFT0UA1I2HV

## ==================== CONDITIONS ==================== ##
Conditions:
  # HasSubdomainName is false if ParamSubdomain value is empty string
  HasSubdomainName: !Not [!Equals [!Ref ParamSubdomain, '']] 

## ===================== RESOURCES ===================== ##
Resources:

  ## ===================== BEGIN ACM ===================== ##
  # request public SSL/TLS certificate from AWS Certificate Manager (ACM) for our domain name and all its subdomains 
  # it helps to secure network communications and establish the identity of websites over the Internet 
  SSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref ParamRootDomain # root domain (such as example.com)
      SubjectAlternativeNames:
        - !Sub '*.${ParamRootDomain}' # request a wildcard certificate for all subdomains
      DomainValidationOptions:
        - DomainName: !Ref ParamRootDomain # DNS record for the root domain
          HostedZoneId: !Ref ParamHostedZoneId
        # Note: If a certificate with automatic (Route53) DNS validation contains both a base domain name and the wildcard for that domain (e.g., example.com and *.example.com), the corresponding DNS validation records are identical.
        # This seems to have caused problems for the automated CloudFormation DNS validation. Solving the problem by removing the redundant wildcard entries from the DomainValidationOption.  
        # Source: https://github.com/aws/aws-cdk/pull/9291 
        - DomainName: !Sub '*.${ParamRootDomain}' # DNS record for the all subdomains
          HostedZoneId: !Ref ParamHostedZoneId
          ValidationDomain: !Ref ParamRootDomain  
      ValidationMethod: DNS
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName
  ## ===================== END ACM ===================== ##

  ## ===================== BEGIN RECORD SET ===================== ##
   # create a Route 53 record set group to route DNS traffic to CloudFront domain for both - domain and subdomain
  Route53RecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      Comment: Route53 record for CloudFront distributions for root domain and subdomain
      # HostedZoneName: !Sub '${ParamRootDomain}.'  # keep the dot
      HostedZoneId: !Ref ParamHostedZoneId
      RecordSets:
        # for CloudFront distributions subdomain (such as www.example.com)
        - Name: !Sub '${ParamSubdomain}.${ParamRootDomain}.'  # keep the dot
          Type: A # 'A' routes traffic to an IPv4 address and some AWS resources. E.g. if the name of the hosted zone is 'example.com' and you want to use www.example.com to route traffic to your distribution, enter 'www.'
          AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # DONT change! It is a magical alphanumeric ID provided by AWS team for CloudFront distribution 
        # for CloudFront distributions root domain (such as example.com)
        - Name: !Sub '${ParamRootDomain}.'  # keep the dot
          Type: A # 'A' routes traffic to an IPv4 address and some AWS resources. E.g. if the name of the hosted zone is 'example.com' and you want to use www.example.com to route traffic to your distribution, enter 'www.'
          AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # DONT change! It is a magical alphanumeric ID provided by AWS team for CloudFront distribution 
  ## ===================== END RECORD SET ===================== ##       

  ## ===================== BEGIN S3 BUCKETS ===================== ##
   # create S3 bucket for subdomain (such as www.example.com) and configure it to host a static website
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain # keep S3 bucket when its stack is deleted
    Properties:
      BucketName: !Ref ParamRootDomain # use the name of subdomain with domain, such as www.example.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      VersioningConfiguration: # turn versioning on in case we need to rollback newly built files to older version
        Status: Enabled
      AccessControl: BucketOwnerFullControl
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref ParamUniqueTagName
  ## ===================== END S3 BUCKETS ===================== ##
  ## ===================== BEGIN CDN ===================== ##
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution for contents delivery
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt S3Bucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        DefaultCacheBehavior:
          CachePolicyId: CachingOptimized
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Aliases:
        - !Ref ParamRootDomain
        - !Sub '*.${ParamRootDomain}'
        IPV6Enabled: false
## ======================= END CDN ====================== ##  